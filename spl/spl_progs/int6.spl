alias sys_call_no S0;
alias return_address S1;
alias filename S2;
alias counter S3;

sys_call_no = [[PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512];
return_address = [PTBR + 2*((SP-2)/512)]*512 + (SP-2)%512;
filename = [[PTBR + 2*((SP-3)/512)]*512 + (SP-3)%512];

if (sys_call_no == 9) then
    //search for the source code file 
    counter = 0;
    while (counter < 64) do
        if ([FAT + 8*counter] == filename) then
            break;
        endif;
        counter = counter + 1;
    endwhile;
    if (counter != 64) then
        alias fat_idx S4;
        alias basic_block S5;
        fat_idx = counter;
        basic_block = [FAT + 8*fat_idx + 2];
        //load the basic block into the scratchpad to find number of req_pages
        load(1,basic_block);
        alias req_pages S6;
        alias avail_pages S7;
        alias free_pages S8;
        alias pid S9;
        alias pcb S10;
        pid = (PTBR - PAGE_TABLE)/8;
        pcb = READY_LIST + 32*pid;

        //find number of req_pages
        req_pages = 0;        
        counter = 0;
        while (counter < 256) do
            if ([SCRATCHPAD + counter] != "" && [SCRATCHPAD + counter] != -1) then
                req_pages = req_pages + 1;
            endif;
            counter = counter + 1;
        endwhile;
        
        //find number of avail_pages to current process
        avail_pages = 0;
        counter = 0;
        while (counter < PTLR) do
            if ([PTBR + 2*counter + 1] == "01" || [PTBR + 2*counter + 1] == "11") then
                avail_pages = avail_pages + 1;
            endif;
            counter = counter + 1;
        endwhile;    

        free_pages = 0;
        counter = 25;
        while (counter < 64) do
            if ([MEM_LIST + counter] == 0) then
                free_pages = free_pages + 1;
            endif;
            counter = counter + 1;
        endwhile;
        
        //initialise pcb 
        if ((req_pages <= avail_pages + free_pages) && (req_pages < PTLR)) then
            //close all the opened files 
            alias sys_idx S11;
            counter = 0;
            while (counter < 8) do
                sys_idx = [pcb + 15 + 2*counter];
                if (sys_idx != -1) then
                    if ([FILE_TABLE + 2*sys_idx + 1] == 1) then
                        [FILE_TABLE + 2*sys_idx] = -1;
                        [FILE_TABLE + 2*sys_idx + 1] = 0;
                    else
                        [FILE_TABLE + 2*sys_idx + 1] = [FILE_TABLE + 2*sys_idx + 1] - 1;
                    endif;
                    [pcb + 15 + 2*counter] = -1;
                endif;
                counter = counter + 1;
            endwhile;
            //mark the used pages as free
            alias counter1 S12;
            counter = 0;

            //mark the used pages as free, initialise the page table 
            while (counter < PTLR) do
                if ([PTBR + 2*counter + 1] == "01" || [PTBR + 2*counter + 1] == "11") then
                    [MEM_LIST + [PTBR + 2*counter]] = 0;
                    //clean the used memory pages 
                    counter1 = 0;
                    while (counter1 < 512) do
                        [[PTBR + 2*counter]*512 + counter1] = "";
                        counter1 = counter1 + 1;
                    endwhile;
                endif;
                [PTBR + 2*counter] = -1;
                [PTBR + 2*counter + 1] = "00"; //setting all entries as unreferenced and invalid
                counter = counter + 1;
            endwhile;
            //allot pages, mark them as used, copy data into it
            alias disk_block S13;
            alias pt_idx S14;
            load(1,basic_block);
            counter = 0;
            counter1 = 0;
            pt_idx = 0;
            while (counter < 256) do
                disk_block = [SCRATCHPAD + counter];
                if (disk_block != "" && disk_block != -1) then
                    //find a memory page for this disk block 
                    //counter1 resumes from where it left the last time 
                    while (counter1 < 64) do
                        if ([MEM_LIST + counter1] == 0) then
                            [MEM_LIST + counter1] = 1; //marked as occupied
                            load(counter1,disk_block); //loaded into memory 
                            [PTBR + 2*pt_idx] = counter1;
                            [PTBR + 2*pt_idx + 1] = "01";
                            break;
                        endif;
                        counter1 = counter1 + 1;
                    endwhile;
                endif;
                counter = counter + 1;
            endwhile;
            //assign a page for the stack 
            while (counter1 < 64) do
                if ([MEM_LIST + counter1] == 0) then
                    [MEM_LIST + counter1] = 1; //marked as occupied
                    [PTBR + 2*(PTLR-1)] = counter1;
                    [PTBR + 2*(PTLR-1) + 1] = "01";
                    break;
                endif;
                counter1 = counter1 + 1;
            endwhile;

            BP = (PTLR-1)*512;
            SP = BP;
            
            [[PTBR + 2*(SP/512)]*512] = 0; //top of stack
            ireturn;
        else
            [return_address] = -1;
        endif;
    else 
        [return_address] = -1;
    endif;
endif;

ireturn;
