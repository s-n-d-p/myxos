alias sys_call_no S0;
alias return_address S1;
alias filename S2;
alias counter S3;

sys_call_no = [[PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512];
return_address = [PTBR + 2*((SP-2)/512)]*512 + (SP-2)%512;


//exec process system call 
if (sys_call_no == 9) then
    filename = [[PTBR + 2*((SP-3)/512)]*512 + (SP-3)%512];
    //1. search fat for code file with the given name
    counter = 0;
    while (counter < 64) do
        if ([FAT + 8*counter] == filename) then
            break;
        endif;
        counter = counter + 1;
    endwhile;
    if (counter == 64) then //no such file exists
        [return_address] = -1;
    else 
        //file exists 
        alias fat_idx S4;
        alias basic_block S5;
        alias stack_page S6;
        alias counter1 S7;

        fat_idx = counter;
        basic_block = [FAT + 8*fat_idx + 2];
        stack_page = [PTBR + 2*(PTLR-1)];

        //2. Clean the current process's page table, also clear the memory pages and swap disk blocks which are not used by any process 
        counter = 0;
        while (counter < PTLR) do
            if ([PTBR + 2*counter + 1] == "01" || [PTBR + 2*counter + 1] == "11") then //valid memory page 
                [MEM_LIST + [PTBR + 2*counter]] = [MEM_LIST + [PTBR + 2*counter]] - 1; //decrement MEM_LIST count 
                if ([MEM_LIST + [PTBR + 2*counter]] == 0) then //no process is using this page, clear its data 
                    counter1 = 0;
                    while (counter1 < 512) do
                        [[PTBR + 2*counter]*512 + counter1] = "";
                        counter1 = counter1 + 1;
                    endwhile;
                endif;
            else
                //check if its a swap disk block 
                if ([PTBR + 2*counter + 1] == "00") then
                    if ([PTBR + 2*counter] >= 448 && [PTBR + 2*counter] < 512) then
                        [DISK_LIST + [PTBR + 2*counter]] = [DISK_LIST + [PTBR + 2*counter]] - 1;
                        if ([DISK_LIST + [PTBR + 2*counter]] == 0) then //no process is using this as swap disk block, clear its data 
                            counter1 = 0;
                            while (counter1 < 512) do
                                [SCRATCHPAD + counter1] = "";   
                                counter1 = counter1 + 1;
                            endwhile;
                            store(1,[PTBR + 2*counter]);
                        endif;
                    endif;
                endif;
            endif;
            [PTBR + 2*counter] = -1;
            [PTBR + 2*counter + 1] = "00";
            counter = counter + 1;
        endwhile;
        
        //3. Close all the open file instances and clear this process's file table 
        alias pid S8;
        alias pcb S9;
        alias sys_idx S10;
        pid = (PTBR - PAGE_TABLE)/8;
        pcb = READY_LIST + 32*pid;
        counter = 0;
        while (counter < 8) do
            sys_idx = [pcb + 15 + 2*counter];
            if (sys_idx != -1) then //valid pointer to system wide open file table 
                [FILE_TABLE + 2*sys_idx + 1] = [FILE_TABLE + 2*sys_idx + 1] - 1; //decrement the file open count 
                if ([FILE_TABLE + 2*sys_idx + 1] == 0) then //no other process is using the same file 
                    [FILE_TABLE + 2*sys_idx] = -1; //invalidate the entry 
                endif;
            endif;
            [pcb + 15 + 2*counter] = -1;
            [pcb + 15 + 2*counter + 1] = 0; //seek := 0
            counter = counter + 1;
        endwhile;

        //rest code for loading desirable process's code into memory 
        //4. Set stack for new process 
        [MEM_LIST + stack_page] = 1; //this will remain 1 as long as this process is not terminated, acc to current os protocol 
        [PTBR + 2*(PTLR-1)] = stack_page;
        [PTBR + 2*(PTLR-1) + 1] = "01";
        
        //5. Create the entry for code disk block in the page table 
        load(1,basic_block);
        counter = 0; counter1 = 0;
        while (counter < 256) do
            if ([SCRATCHPAD + counter] != "" && [SCRATCHPAD + counter] != -1) then //valid disk block number 
                [PTBR + 2*counter1] = [SCRATCHPAD + counter];
                [PTBR + 2*counter1 + 1] = "00";
                counter1 = counter1 + 1;
            endif;
            counter = counter + 1;
        endwhile;
        [pcb + 31] = -1; //initially no parent process 
        [stack_page*512] = 0;
    endif;
endif;

//getpid process system call
if (sys_call_no == 11) then
    alias pid S4;
    pid = (PTBR - PAGE_TABLE)/8;
    [return_address] = pid;
endif;

//getppid process system call 
if (sys_call_no == 12) then
    alias pid S4;
    alias pcb S5;
    pid = (PTBR - PAGE_TABLE)/8;
    pcb = READY_LIST + 32*pid;
    [return_address] = [pcb + 31];
endif;


ireturn;
