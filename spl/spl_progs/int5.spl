alias sys_call_no S0;
alias return_address S1;
alias parent_pid S2;
alias parent_pcb S3;
alias child_pid S4;
alias child_pcb S5;
alias child_ptbr S6; 
alias counter S7;

sys_call_no = [[PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512];
return_address = [PTBR + 2*((SP-2)/512)]*512 + (SP-2)%512;
parent_pid = (PTBR - PAGE_TABLE) / 8;
parent_pcb = READY_LIST + 32*parent_pid;

//fork system call 
if (sys_call_no == 8) then
    //finding a free pcb 
    counter = 0;
    while (counter < 32) do
        if ([READY_LIST + 32*counter + 1] == 0) then
            child_pid = counter;
            child_ptbr = PAGE_TABLE + 8*child_pid;            
            child_pcb = READY_LIST + 32*child_pid;
            break;
        endif;
        counter = counter + 1;
    endwhile;
    if (counter == 32) then //no free pcb 
        [return_address] = -1;
    else 
        //look for 1 free memory page 
        counter = 25;
        while (counter < 64) do
            if ([MEM_LIST + counter] == 0) then
                break;
            endif;
            counter = counter + 1;
        endwhile;
        
        if (counter == 64) then //no free page available 
            [return_address] = -1;
        else 
            alias ch_stack_page S8;
            alias pa_stack_page S9;
            ch_stack_page = counter;
            pa_stack_page = [PTBR + 2*(PTLR-1)];
            //only copy the parent's stack now 
            [MEM_LIST + ch_stack_page] = 1; //mark child stack page as occupied 
            [child_ptbr + 2*(PTLR-1)] = ch_stack_page; //set child's page table entry for stack 
            [child_ptbr + 2*(PTLR-1) + 1] = "01";
            counter = 0;
            while (counter < 512) do //copy the stack content 
                [ch_stack_page*512 + counter] = [pa_stack_page*512 + counter];
                counter = counter + 1;
            endwhile;

            //for the other page table entries
            //copy the page number if its a memory page and increase its count in the memory free list 
            //copy the block number if its a disk block and increase its count in the disk free list 
            counter = 0;
            while (counter < PTLR - 1) do
                [child_ptbr + 2*counter] = [PTBR + 2*counter];
                [child_ptbr + 2*counter + 1] = [PTBR + 2*counter + 1];
                if ([PTBR + 2*counter + 1] == "01" || [PTBR + 2*counter + 1] == "11") then
                    //valid memory page 
                    [MEM_LIST + [PTBR + 2*counter]] = [MEM_LIST + [PTBR + 2*counter]] + 1;
                else 
                    if ([PTBR + 2*counter + 1] == "00") then
                        if ([PTBR + 2*counter] >= 448 && [PTBR + 2*counter] < 512) then
                            //valid disk block number 
                            [DISK_LIST + [PTBR + 2*counter]] = [DISK_LIST + [PTBR + 2*counter]] + 1;
                        endif;
                    endif;
                endif;
                counter = counter + 1;
            endwhile;
        
            
            //initialise the child's pcb 
            [child_pcb] = child_pid; 
            [child_pcb + 1] = 1; //state --> ready 
            [child_pcb + 2] = BP;
            [child_pcb + 3] = SP - 1;
            [child_pcb + 4] = [[PTBR + 2*(SP/512)]*512 + (SP)%512];
            [child_pcb + 5] = child_ptbr;
            [child_pcb + 6] = PTLR;
            [child_pcb + 7] = R0;
            [child_pcb + 8] = R1;
            [child_pcb + 9] = R2;
            [child_pcb + 10] = R3;
            [child_pcb + 11] = R4;
            [child_pcb + 12] = R5;
            [child_pcb + 13] = R6;
            [child_pcb + 14] = R7;
            //copy the per process open file table 
            counter = 0;
            while (counter < 8) do
                if ([parent_pcb + 15 + 2*counter] != -1) then
                    [child_pcb + 15 + 2*counter] = [parent_pcb + 15 + 2*counter];
                    [child_pcb + 15 + 2*counter + 1] = [parent_pcb + 15 + 2*counter + 1];    
                    [FILE_TABLE + 2*[child_pcb + 15 + 2*counter] + 1] =  [FILE_TABLE + 2*[child_pcb + 15 + 2*counter] + 1] + 1;
                else 
                    [child_pcb + 15 + 2*counter] = -1;
                endif;
                counter = counter + 1;
            endwhile;
            [child_pcb + 31] = parent_pid;
            [return_address] = child_pid;
            [[child_ptbr + 2*((SP-2)/512)]*512 + (SP-2)%512] = -2;
        endif;
    endif;
endif;
ireturn;