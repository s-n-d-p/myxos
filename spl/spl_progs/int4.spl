alias sys_call_no S0;
alias return_address S1;
alias w2w S2;
alias fd S3;
alias pid S4;
alias pcb S5;

sys_call_no = [[PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512];
return_address = [PTBR + 2*((SP-2)/512)]*512 + (SP-2)%512;
w2w = [[PTBR + 2*((SP-3)/512)]*512 + (SP-3)%512];
fd = [[PTBR + 2*((SP-4)/512)]*512 + (SP-4)%512];
pid = (PTBR - PAGE_TABLE) / 8;
pcb = READY_LIST + 32*pid;

//write system call 
if (sys_call_no == 5) then
    if (fd < 0) then
        [return_address] = -1;
    else 
        if (fd >= 8) then
            [return_address] = -1;
        else 
            if ([pcb + 15 + 2*fd] == -1) then
                [return_address] = -1;
            else 
                //fd is in range[0,8), and per process file table entry is valid
                alias sys_idx S6;
                alias lseek S7;
                alias fat_idx S8;
                alias basic_block S9;
                alias data_block S10;
                sys_idx = [pcb + 15 + 2*fd];
                lseek = [pcb + 15 + 2*fd + 1];                
                fat_idx = [FILE_TABLE + 2*sys_idx];
                basic_block = [FAT + 8*fat_idx + 2];

                if (lseek/512 >= 256) then //max no of data blocks is constraint to be <= 256 
                    [return_address] = -1;
                else 
                    load(1,basic_block); //loading the basic_block in memory
                    data_block = [SCRATCHPAD + (lseek/512)];
                    if (data_block != -1) then
                        load(1,data_block);
                        [SCRATCHPAD + (lseek%512)] = w2w;
                        store(1,data_block);
                        [pcb + 15 + 2*fd + 1] = [pcb + 15 + 2*fd + 1] + 1; //inc lseek value 
                        [return_address] = 0;
                    else 
                        //search for a free data block 
                        alias counter S11;
                        counter = 24;
                        while (counter < 448) do
                            if ([DISK_LIST + counter] == 0) then
                                [DISK_LIST + counter] = 1;
                                break;
                            endif;                                
                            counter = counter + 1;
                        endwhile;
                        if (counter == 448) then
                            //no free block 
                            [return_address] = -1;
                        else 
                            alias free_block S12;
                            free_block = counter;
                            counter = 0;
                            load(1,basic_block);
                            [SCRATCHPAD + (lseek/512)] = free_block;
                            store(1,basic_block);
                            while (counter < 512) do
                                [SCRATCHPAD + counter] = "";
                                counter = counter + 1;
                            endwhile;
                            [SCRATCHPAD] = w2w;
                            [pcb + 15 + 2*fd + 1] = [pcb + 15 + 2*fd + 1] + 1; //inc lseek value 
                            [FAT + 8*fat_idx + 1] = [FAT + 8*fat_idx + 1] + 512;
                            store(1,free_block);
                            store(5,19);
                            store(6,20);                            
                            [return_address] = 0;
                        endif;
                    endif;
                endif;                 
            endif;
        endif;
    endif;
endif;

ireturn;